var documenterSearchIndex = {"docs":
[{"location":"#ShareAdd.jl","page":"General Info","title":"ShareAdd.jl","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"This Julia package exports macro @usingany. This macro makes package(s) available, if they are not already, and loads them with using keyword.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"If a package is available in an environment in LOAD_PATH, that's OK.\nIf a package is available in a shared environment, this environment will be pushed into LOAD_PATH.\nOtherwise if it can be installed, you will be prompted to select an environment to install the package(s).\nIf the package is not listed in any registry, an error will be thrown. ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"The package also exports several utility functions - see the Exported functions section.","category":"page"},{"location":"#Usage-example","page":"General Info","title":"Usage example","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"While working on your package MyPackage you may temporarily need packages TOML, Plots, and Chairmarks, which however you don't want to add to your package dependencies. You also need Unitful, which is already an installed dependence of MyPackage. TOML is available in the stdlib, Plots you already put into a shared environment @utilities, and Chairmarks is not on your computer yet. ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"First, you add ShareAdd to your \"main\" (standard) enviroment, making it available at all times:","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"]\n(YourEnv) pkg> activate \n  Activating project at `~/.julia/environments/v1.10`\n\n(@v1.10) pkg> add ShareAdd\n(...)\n(@v1.10) pkg> activate . # back to your environment\n(YourEnv) pkg> ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"By that occasion you may also want to clean your standard environment: It is generally not recommended having a lot of packages there.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"Now, the only thing you need, is to type into REPL (or adding to your script) the following two lines:","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"using ShareAdd\n@usingany Unitful, TOML, Plots, Chairmarks","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"As Chairmarks was not installed yet, you will be asked as to where to install it. You may e.g. add it to your existing @utilities shared environment, or let create a new environment @Chairmarks and put it there. ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"Afrerwards @utilities (and @Chairmarks, if created) will be added to LOAD_PATH, making their packages available.","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"Finally, the macro executes using Unitful, TOML, Plots, Chairmarks - and that's it. Enjoy!","category":"page"},{"location":"#Likes-and-dislikes?","page":"General Info","title":"Likes & dislikes?","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"Star on GitHub, open an issue, contact me on Julia Discourse.","category":"page"},{"location":"#Credits","page":"General Info","title":"Credits","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"Some code and inspiration from EnvironmentMigrators.jl by Mark Kittisopikul. ","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"The AI from Codeium helped me and bugged me (pun intended).","category":"page"},{"location":"#Copyright-and-License","page":"General Info","title":"Copyright and License","text":"","category":"section"},{"location":"","page":"General Info","title":"General Info","text":"Â© 2024 Eben60","category":"page"},{"location":"","page":"General Info","title":"General Info","text":"MIT License (see separate file LICENSE)","category":"page"},{"location":"docstrings/#Macros","page":"Docstrings","title":"Macros","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [ShareAdd]\nOrder   = [:macro, ]","category":"page"},{"location":"docstrings/#ShareAdd.@usingany-Tuple{Any}","page":"Docstrings","title":"ShareAdd.@usingany","text":"@usingany pkg\n@usingany pkg1, pkg2, ...\n\nMakes package(s) available, if they are not already, and loads them with using keyword. \n\nIf a package is available in an environment in LOAD_PATH, that's OK.\nIf a package is available in a shared environment, this environment will be pushed into LOAD_PATH.\nOtherwise if it can be installed, you will be prompted to select an environment to install the package(s).\nIf the package is not listed in any registry, an error will be thrown.\n\nThis macro is exported.\n\n\n\n\n\n","category":"macro"},{"location":"docstrings/#Types","page":"Docstrings","title":"Types","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"All types are declared as public","category":"page"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [ShareAdd]\nOrder   = [:type, ]","category":"page"},{"location":"docstrings/#ShareAdd.EnvInfo","page":"Docstrings","title":"ShareAdd.EnvInfo","text":"mutable struct EnvInfo\n\nname::String - name of the environment\npath::String - path of the environment's folder\npkgs::Vector{String} - list of packages in the environment\nin_path::Bool - whether the environment is in LOAD_PATH \n\n\n\n\n\n","category":"type"},{"location":"docstrings/#ShareAdd.EnvSet","page":"Docstrings","title":"ShareAdd.EnvSet","text":"struct EnvSet\n\nenvs::Set{String} - set of environment names\nextraneous_pks::Set{String} - (internally used, see optim_set function for details)\nextra_lng::Int - as above\nno_of_sets::Int - as above\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#ShareAdd.OptimSet","page":"Docstrings","title":"ShareAdd.OptimSet","text":"mutable struct OptimSet\n\nbest_set::EnvSet - the best set of environments currently found - see optim_set function for details.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#ShareAdd.PackageInfo","page":"Docstrings","title":"ShareAdd.PackageInfo","text":"mutable struct PackageInfo\n\nname::String - name of the package\nenvs::Vector{EnvInfo} - list of environments in which the package is present\nin_path::Bool - whether any of the environments is in LOAD_PATH\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#Functions","page":"Docstrings","title":"Functions","text":"","category":"section"},{"location":"docstrings/#Exported-functions","page":"Docstrings","title":"Exported functions","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [ShareAdd]\nOrder   = [:function]\nFilter = t -> Base.isexported(ShareAdd, Symbol(t))","category":"page"},{"location":"docstrings/#ShareAdd.delete_shared_env-Tuple{ShareAdd.EnvInfo}","page":"Docstrings","title":"ShareAdd.delete_shared_env","text":"delete_shared_env(env::Union{AbstractString, EnvInfo})\n\nDeletes the shared environment env by erasing it's directory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ShareAdd.delete_shared_pkg-Tuple{AbstractString}","page":"Docstrings","title":"ShareAdd.delete_shared_pkg","text":"delete_shared_pkg(pkg::AbstractString)\n\nDeletes the package pkg from it's shared environment. Deletes this environment if it was the only package there. If the package is present in multiple environments, it will not be deleted and an error will be thrown, suggesting you do it manually.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ShareAdd.reset_loadpath!-Tuple{}","page":"Docstrings","title":"ShareAdd.reset_loadpath!","text":"reset_loadpath!()\n\nReset the LOAD_PATH to the default values: removes any manually added paths, and resets the load path to the standard values of [\"@\", \"@v#.#\", \"@stdlib\"]. \n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ShareAdd.sh_add-Tuple{AbstractString}","page":"Docstrings","title":"ShareAdd.sh_add","text":"sh_add(env_name::AbstractString; depot = first(DEPOT_PATH)) -> Vector{String}\nsh_add(env_names::AbstractVector{<:AbstractString}; depot = first(DEPOT_PATH)) -> Vector{String}\nsh_add(env_name::AbstractString, ARGS...; depot = first(DEPOT_PATH)) -> Vector{String}\n\nAdds shared environment(s) to LOAD_PATH, making the corresponding packages all available in the current session.\n\nReturns the list of all packages in the added environments as a Vector{String}.\n\nExamples\n\njulia> sh_add(\"@StatPackages\")\n3-element Vector{String}:\n \"Arrow\"\n \"CSV\"\n \"DataFrames\"\n\njulia> sh_add([\"@StatPackages\", \"@Makie\"])\n4-element Vector{String}:\n \"Arrow\"\n \"CSV\"\n \"DataFrames\"\n \"Makie\"\n\njulia> sh_add(\"@StatPackages\", \"@Makie\")\n4-element Vector{String}:\n \"Arrow\"\n \"CSV\"\n \"DataFrames\"\n \"Makie\"\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Public-functions","page":"Docstrings","title":"Public functions","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [ShareAdd]\nOrder   = [:function]\nFilter = t -> (! Base.isexported(ShareAdd, Symbol(t)) && Base.ispublic(ShareAdd, Symbol(t)))","category":"page"},{"location":"docstrings/#ShareAdd.check_packages-Tuple{Any}","page":"Docstrings","title":"ShareAdd.check_packages","text":"check_packages(packages; depot = first(DEPOT_PATH)) -> NamedTuple\n\nchecks whether packages are available in the current environment, shared environments, or are installable.\n\nReturns a NamedTuple with the following fields:\n\ninpath_pkgs: packages that are already present in some environment in LOAD_PATH\ninshared_pkgs: packages that are available in some shared environments\ninstallable_pkgs: available packages\nunavailable_pkgs: packages that are not available from any registry\nshared_pkgs: Dictionary of packages in shared environments\ncurrent_pr: information about the current environment as @NamedTuple{name::String, shared::Bool}\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ShareAdd.current_env-Tuple{}","page":"Docstrings","title":"ShareAdd.current_env","text":"current_env(; depot = first(DEPOT_PATH)) -> EnvInfo\n\nReturns information about the current active environment as an EnvInfo object.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ShareAdd.env_path","page":"Docstrings","title":"ShareAdd.env_path","text":"env_path(env_name::AbstractString, depot = first(DEPOT_PATH); skipfirstchar = true) -> String\n\nReturns the path of the environment with name env_name.  If skipfirstchar is true, the first character of env_name is skipped,  so that the name of a shared environment can be passed without the leading @.\n\n\n\n\n\n","category":"function"},{"location":"docstrings/#ShareAdd.list_shared_environments-Tuple{}","page":"Docstrings","title":"ShareAdd.list_shared_environments","text":"list_shared_environments(depot = first(DEPOT_PATH)) -> (shared_envs::Vector{EnvInfo}, env_path::String)\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ShareAdd.list_shared_packages-Tuple{}","page":"Docstrings","title":"ShareAdd.list_shared_packages","text":"list_shared_packages(;depot = first(DEPOT_PATH)) -> Dict{String, PackageInfo}\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ShareAdd.optim_set-Tuple{AbstractArray{ShareAdd.PackageInfo}}","page":"Docstrings","title":"ShareAdd.optim_set","text":"optim_set(pks::AbstractArray{<:AbstractString}, envs::AbstractVector{EnvInfo}) -> OptimSet\noptim_set(pkgs::AbstractArray{PackageInfo}) -> OptimSet\n\nFinds the optimum set of environments for the given list of packages.  Optimal is a set of environments with the least number of extraneous packages.  If two sets have the same number of extraneous packages, then the one with the least number of environments is chosen.\n\nThe function is internal.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Internal-functions","page":"Docstrings","title":"Internal functions","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [ShareAdd]\nOrder   = [:function]\nFilter = t -> ! Base.ispublic(ShareAdd, Symbol(t))","category":"page"},{"location":"docstrings/#ShareAdd.make_importable-Tuple{Any}","page":"Docstrings","title":"ShareAdd.make_importable","text":"make_importable(packages) -> :success | nothing\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Index","page":"Docstrings","title":"Index","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"","category":"page"}]
}
